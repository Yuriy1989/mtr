version: "3.9"

services:
  mtr-frontend:
    build:
      context: .
      dockerfile: mtr-frontend/frontend.Dockerfile
    image: mtr-frontend:latest
    container_name: mtr-frontend
    depends_on:
      - mtr-backend
    volumes:
      # Монтируем сертификаты в nginx
      - ./certs:/etc/nginx/certs:ro
    ports:
      - "443:443"
      - "80:80"
    networks:
      - mtr-net
    restart: unless-stopped

  mtr-backend:
    build:
      context: .
      dockerfile: mtr-backend/backend.Dockerfile
    image: mtr-backend:latest
    container_name: mtr-backend
    env_file:
      - mtr-backend/.env
    volumes:
      # Если backend сам читает TLS — смонтируем сюда
      - ./certs:/app/certs:ro
    environment:
      # Если используешь контейнерный Postgres — host=postgres
      DATABASE_HOST: ${DATABASE_HOST:-postgres}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-admin}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-adminpassword}
      DATABASE_NAME: ${DATABASE_NAME:-mtr_project}
    depends_on:
      - postgres
    ports:
      # Открывать порт бэка наружу не обязательно (фронт ходит по внутренней сети),
      # но оставляю для удобства отладки:
      - "3001:3001"
    networks:
      - mtr-net
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    container_name: mtr-postgres
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME:-admin}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-adminpassword}
      POSTGRES_DB: ${DATABASE_NAME:-mtr_project}
    ports:
      - "5432:5432"
    volumes:
      # ДАННЫЕ ЛЕЖАТ НА ХОСТЕ, НЕ В КОНТЕЙНЕРЕ
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - mtr-net
    restart: unless-stopped

networks:
  mtr-net:
    driver: bridge
